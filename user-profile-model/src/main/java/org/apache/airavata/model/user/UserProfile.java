/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.user;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A structure holding the user profile and its child models.
 * 
 * userModelVersion:
 *  Version number of profile
 * 
 * airavataInternalUserId:
 *  internal to Airavata, not intended to be used outside of the Airavata platform or possibly by gateways
 *  (that is, never shown to users), never reassigned, REQUIRED
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-21")
public class UserProfile implements org.apache.thrift.TBase<UserProfile, UserProfile._Fields>, java.io.Serializable, Cloneable, Comparable<UserProfile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserProfile");

  private static final org.apache.thrift.protocol.TField USER_MODEL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("userModelVersion", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AIRAVATA_INTERNAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataInternalUserId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TIER_FIELD_DESC = new org.apache.thrift.protocol.TField("tier", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VERIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("verified", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PUBLICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("publications", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField FUNDING_FIELD_DESC = new org.apache.thrift.protocol.TField("funding", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField INSTITUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("institution", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserProfileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserProfileTupleSchemeFactory());
  }

  private String userModelVersion; // optional
  private String airavataInternalUserId; // optional
  private String email; // optional
  private String name; // optional
  private String tier; // optional
  private String verified; // optional
  private List<Publication> publications; // optional
  private List<String> funding; // optional
  private Institution institution; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_MODEL_VERSION((short)1, "userModelVersion"),
    AIRAVATA_INTERNAL_USER_ID((short)2, "airavataInternalUserId"),
    EMAIL((short)3, "email"),
    NAME((short)4, "name"),
    TIER((short)5, "tier"),
    VERIFIED((short)6, "verified"),
    PUBLICATIONS((short)7, "publications"),
    FUNDING((short)8, "funding"),
    INSTITUTION((short)9, "institution");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_MODEL_VERSION
          return USER_MODEL_VERSION;
        case 2: // AIRAVATA_INTERNAL_USER_ID
          return AIRAVATA_INTERNAL_USER_ID;
        case 3: // EMAIL
          return EMAIL;
        case 4: // NAME
          return NAME;
        case 5: // TIER
          return TIER;
        case 6: // VERIFIED
          return VERIFIED;
        case 7: // PUBLICATIONS
          return PUBLICATIONS;
        case 8: // FUNDING
          return FUNDING;
        case 9: // INSTITUTION
          return INSTITUTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.USER_MODEL_VERSION,_Fields.AIRAVATA_INTERNAL_USER_ID,_Fields.EMAIL,_Fields.NAME,_Fields.TIER,_Fields.VERIFIED,_Fields.PUBLICATIONS,_Fields.FUNDING,_Fields.INSTITUTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_MODEL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("userModelVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AIRAVATA_INTERNAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataInternalUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIER, new org.apache.thrift.meta_data.FieldMetaData("tier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERIFIED, new org.apache.thrift.meta_data.FieldMetaData("verified", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLICATIONS, new org.apache.thrift.meta_data.FieldMetaData("publications", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Publication.class))));
    tmpMap.put(_Fields.FUNDING, new org.apache.thrift.meta_data.FieldMetaData("funding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INSTITUTION, new org.apache.thrift.meta_data.FieldMetaData("institution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Institution.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserProfile.class, metaDataMap);
  }

  public UserProfile() {
    this.userModelVersion = "1.0";

    this.airavataInternalUserId = "DO_NOT_ADD_AT_CLIENT";

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserProfile(UserProfile other) {
    if (other.isSetUserModelVersion()) {
      this.userModelVersion = other.userModelVersion;
    }
    if (other.isSetAiravataInternalUserId()) {
      this.airavataInternalUserId = other.airavataInternalUserId;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetTier()) {
      this.tier = other.tier;
    }
    if (other.isSetVerified()) {
      this.verified = other.verified;
    }
    if (other.isSetPublications()) {
      List<Publication> __this__publications = new ArrayList<Publication>(other.publications.size());
      for (Publication other_element : other.publications) {
        __this__publications.add(new Publication(other_element));
      }
      this.publications = __this__publications;
    }
    if (other.isSetFunding()) {
      List<String> __this__funding = new ArrayList<String>(other.funding);
      this.funding = __this__funding;
    }
    if (other.isSetInstitution()) {
      this.institution = new Institution(other.institution);
    }
  }

  public UserProfile deepCopy() {
    return new UserProfile(this);
  }

  @Override
  public void clear() {
    this.userModelVersion = "1.0";

    this.airavataInternalUserId = "DO_NOT_ADD_AT_CLIENT";

    this.email = null;
    this.name = null;
    this.tier = null;
    this.verified = null;
    this.publications = null;
    this.funding = null;
    this.institution = null;
  }

  public String getUserModelVersion() {
    return this.userModelVersion;
  }

  public void setUserModelVersion(String userModelVersion) {
    this.userModelVersion = userModelVersion;
  }

  public void unsetUserModelVersion() {
    this.userModelVersion = null;
  }

  /** Returns true if field userModelVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetUserModelVersion() {
    return this.userModelVersion != null;
  }

  public void setUserModelVersionIsSet(boolean value) {
    if (!value) {
      this.userModelVersion = null;
    }
  }

  public String getAiravataInternalUserId() {
    return this.airavataInternalUserId;
  }

  public void setAiravataInternalUserId(String airavataInternalUserId) {
    this.airavataInternalUserId = airavataInternalUserId;
  }

  public void unsetAiravataInternalUserId() {
    this.airavataInternalUserId = null;
  }

  /** Returns true if field airavataInternalUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetAiravataInternalUserId() {
    return this.airavataInternalUserId != null;
  }

  public void setAiravataInternalUserIdIsSet(boolean value) {
    if (!value) {
      this.airavataInternalUserId = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getTier() {
    return this.tier;
  }

  public void setTier(String tier) {
    this.tier = tier;
  }

  public void unsetTier() {
    this.tier = null;
  }

  /** Returns true if field tier is set (has been assigned a value) and false otherwise */
  public boolean isSetTier() {
    return this.tier != null;
  }

  public void setTierIsSet(boolean value) {
    if (!value) {
      this.tier = null;
    }
  }

  public String getVerified() {
    return this.verified;
  }

  public void setVerified(String verified) {
    this.verified = verified;
  }

  public void unsetVerified() {
    this.verified = null;
  }

  /** Returns true if field verified is set (has been assigned a value) and false otherwise */
  public boolean isSetVerified() {
    return this.verified != null;
  }

  public void setVerifiedIsSet(boolean value) {
    if (!value) {
      this.verified = null;
    }
  }

  public int getPublicationsSize() {
    return (this.publications == null) ? 0 : this.publications.size();
  }

  public java.util.Iterator<Publication> getPublicationsIterator() {
    return (this.publications == null) ? null : this.publications.iterator();
  }

  public void addToPublications(Publication elem) {
    if (this.publications == null) {
      this.publications = new ArrayList<Publication>();
    }
    this.publications.add(elem);
  }

  public List<Publication> getPublications() {
    return this.publications;
  }

  public void setPublications(List<Publication> publications) {
    this.publications = publications;
  }

  public void unsetPublications() {
    this.publications = null;
  }

  /** Returns true if field publications is set (has been assigned a value) and false otherwise */
  public boolean isSetPublications() {
    return this.publications != null;
  }

  public void setPublicationsIsSet(boolean value) {
    if (!value) {
      this.publications = null;
    }
  }

  public int getFundingSize() {
    return (this.funding == null) ? 0 : this.funding.size();
  }

  public java.util.Iterator<String> getFundingIterator() {
    return (this.funding == null) ? null : this.funding.iterator();
  }

  public void addToFunding(String elem) {
    if (this.funding == null) {
      this.funding = new ArrayList<String>();
    }
    this.funding.add(elem);
  }

  public List<String> getFunding() {
    return this.funding;
  }

  public void setFunding(List<String> funding) {
    this.funding = funding;
  }

  public void unsetFunding() {
    this.funding = null;
  }

  /** Returns true if field funding is set (has been assigned a value) and false otherwise */
  public boolean isSetFunding() {
    return this.funding != null;
  }

  public void setFundingIsSet(boolean value) {
    if (!value) {
      this.funding = null;
    }
  }

  public Institution getInstitution() {
    return this.institution;
  }

  public void setInstitution(Institution institution) {
    this.institution = institution;
  }

  public void unsetInstitution() {
    this.institution = null;
  }

  /** Returns true if field institution is set (has been assigned a value) and false otherwise */
  public boolean isSetInstitution() {
    return this.institution != null;
  }

  public void setInstitutionIsSet(boolean value) {
    if (!value) {
      this.institution = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_MODEL_VERSION:
      if (value == null) {
        unsetUserModelVersion();
      } else {
        setUserModelVersion((String)value);
      }
      break;

    case AIRAVATA_INTERNAL_USER_ID:
      if (value == null) {
        unsetAiravataInternalUserId();
      } else {
        setAiravataInternalUserId((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TIER:
      if (value == null) {
        unsetTier();
      } else {
        setTier((String)value);
      }
      break;

    case VERIFIED:
      if (value == null) {
        unsetVerified();
      } else {
        setVerified((String)value);
      }
      break;

    case PUBLICATIONS:
      if (value == null) {
        unsetPublications();
      } else {
        setPublications((List<Publication>)value);
      }
      break;

    case FUNDING:
      if (value == null) {
        unsetFunding();
      } else {
        setFunding((List<String>)value);
      }
      break;

    case INSTITUTION:
      if (value == null) {
        unsetInstitution();
      } else {
        setInstitution((Institution)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_MODEL_VERSION:
      return getUserModelVersion();

    case AIRAVATA_INTERNAL_USER_ID:
      return getAiravataInternalUserId();

    case EMAIL:
      return getEmail();

    case NAME:
      return getName();

    case TIER:
      return getTier();

    case VERIFIED:
      return getVerified();

    case PUBLICATIONS:
      return getPublications();

    case FUNDING:
      return getFunding();

    case INSTITUTION:
      return getInstitution();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_MODEL_VERSION:
      return isSetUserModelVersion();
    case AIRAVATA_INTERNAL_USER_ID:
      return isSetAiravataInternalUserId();
    case EMAIL:
      return isSetEmail();
    case NAME:
      return isSetName();
    case TIER:
      return isSetTier();
    case VERIFIED:
      return isSetVerified();
    case PUBLICATIONS:
      return isSetPublications();
    case FUNDING:
      return isSetFunding();
    case INSTITUTION:
      return isSetInstitution();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserProfile)
      return this.equals((UserProfile)that);
    return false;
  }

  public boolean equals(UserProfile that) {
    if (that == null)
      return false;

    boolean this_present_userModelVersion = true && this.isSetUserModelVersion();
    boolean that_present_userModelVersion = true && that.isSetUserModelVersion();
    if (this_present_userModelVersion || that_present_userModelVersion) {
      if (!(this_present_userModelVersion && that_present_userModelVersion))
        return false;
      if (!this.userModelVersion.equals(that.userModelVersion))
        return false;
    }

    boolean this_present_airavataInternalUserId = true && this.isSetAiravataInternalUserId();
    boolean that_present_airavataInternalUserId = true && that.isSetAiravataInternalUserId();
    if (this_present_airavataInternalUserId || that_present_airavataInternalUserId) {
      if (!(this_present_airavataInternalUserId && that_present_airavataInternalUserId))
        return false;
      if (!this.airavataInternalUserId.equals(that.airavataInternalUserId))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_tier = true && this.isSetTier();
    boolean that_present_tier = true && that.isSetTier();
    if (this_present_tier || that_present_tier) {
      if (!(this_present_tier && that_present_tier))
        return false;
      if (!this.tier.equals(that.tier))
        return false;
    }

    boolean this_present_verified = true && this.isSetVerified();
    boolean that_present_verified = true && that.isSetVerified();
    if (this_present_verified || that_present_verified) {
      if (!(this_present_verified && that_present_verified))
        return false;
      if (!this.verified.equals(that.verified))
        return false;
    }

    boolean this_present_publications = true && this.isSetPublications();
    boolean that_present_publications = true && that.isSetPublications();
    if (this_present_publications || that_present_publications) {
      if (!(this_present_publications && that_present_publications))
        return false;
      if (!this.publications.equals(that.publications))
        return false;
    }

    boolean this_present_funding = true && this.isSetFunding();
    boolean that_present_funding = true && that.isSetFunding();
    if (this_present_funding || that_present_funding) {
      if (!(this_present_funding && that_present_funding))
        return false;
      if (!this.funding.equals(that.funding))
        return false;
    }

    boolean this_present_institution = true && this.isSetInstitution();
    boolean that_present_institution = true && that.isSetInstitution();
    if (this_present_institution || that_present_institution) {
      if (!(this_present_institution && that_present_institution))
        return false;
      if (!this.institution.equals(that.institution))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userModelVersion = true && (isSetUserModelVersion());
    list.add(present_userModelVersion);
    if (present_userModelVersion)
      list.add(userModelVersion);

    boolean present_airavataInternalUserId = true && (isSetAiravataInternalUserId());
    list.add(present_airavataInternalUserId);
    if (present_airavataInternalUserId)
      list.add(airavataInternalUserId);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_tier = true && (isSetTier());
    list.add(present_tier);
    if (present_tier)
      list.add(tier);

    boolean present_verified = true && (isSetVerified());
    list.add(present_verified);
    if (present_verified)
      list.add(verified);

    boolean present_publications = true && (isSetPublications());
    list.add(present_publications);
    if (present_publications)
      list.add(publications);

    boolean present_funding = true && (isSetFunding());
    list.add(present_funding);
    if (present_funding)
      list.add(funding);

    boolean present_institution = true && (isSetInstitution());
    list.add(present_institution);
    if (present_institution)
      list.add(institution);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserProfile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserModelVersion()).compareTo(other.isSetUserModelVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserModelVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userModelVersion, other.userModelVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAiravataInternalUserId()).compareTo(other.isSetAiravataInternalUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAiravataInternalUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataInternalUserId, other.airavataInternalUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTier()).compareTo(other.isSetTier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tier, other.tier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerified()).compareTo(other.isSetVerified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verified, other.verified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublications()).compareTo(other.isSetPublications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publications, other.publications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunding()).compareTo(other.isSetFunding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funding, other.funding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstitution()).compareTo(other.isSetInstitution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstitution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.institution, other.institution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserProfile(");
    boolean first = true;

    if (isSetUserModelVersion()) {
      sb.append("userModelVersion:");
      if (this.userModelVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.userModelVersion);
      }
      first = false;
    }
    if (isSetAiravataInternalUserId()) {
      if (!first) sb.append(", ");
      sb.append("airavataInternalUserId:");
      if (this.airavataInternalUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataInternalUserId);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetTier()) {
      if (!first) sb.append(", ");
      sb.append("tier:");
      if (this.tier == null) {
        sb.append("null");
      } else {
        sb.append(this.tier);
      }
      first = false;
    }
    if (isSetVerified()) {
      if (!first) sb.append(", ");
      sb.append("verified:");
      if (this.verified == null) {
        sb.append("null");
      } else {
        sb.append(this.verified);
      }
      first = false;
    }
    if (isSetPublications()) {
      if (!first) sb.append(", ");
      sb.append("publications:");
      if (this.publications == null) {
        sb.append("null");
      } else {
        sb.append(this.publications);
      }
      first = false;
    }
    if (isSetFunding()) {
      if (!first) sb.append(", ");
      sb.append("funding:");
      if (this.funding == null) {
        sb.append("null");
      } else {
        sb.append(this.funding);
      }
      first = false;
    }
    if (isSetInstitution()) {
      if (!first) sb.append(", ");
      sb.append("institution:");
      if (this.institution == null) {
        sb.append("null");
      } else {
        sb.append(this.institution);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (institution != null) {
      institution.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserProfileStandardSchemeFactory implements SchemeFactory {
    public UserProfileStandardScheme getScheme() {
      return new UserProfileStandardScheme();
    }
  }

  private static class UserProfileStandardScheme extends StandardScheme<UserProfile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserProfile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_MODEL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userModelVersion = iprot.readString();
              struct.setUserModelVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AIRAVATA_INTERNAL_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.airavataInternalUserId = iprot.readString();
              struct.setAiravataInternalUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tier = iprot.readString();
              struct.setTierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verified = iprot.readString();
              struct.setVerifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PUBLICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.publications = new ArrayList<Publication>(_list0.size);
                Publication _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Publication();
                  _elem1.read(iprot);
                  struct.publications.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPublicationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FUNDING
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.funding = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.funding.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setFundingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INSTITUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.institution = new Institution();
              struct.institution.read(iprot);
              struct.setInstitutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserProfile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userModelVersion != null) {
        if (struct.isSetUserModelVersion()) {
          oprot.writeFieldBegin(USER_MODEL_VERSION_FIELD_DESC);
          oprot.writeString(struct.userModelVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.airavataInternalUserId != null) {
        if (struct.isSetAiravataInternalUserId()) {
          oprot.writeFieldBegin(AIRAVATA_INTERNAL_USER_ID_FIELD_DESC);
          oprot.writeString(struct.airavataInternalUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tier != null) {
        if (struct.isSetTier()) {
          oprot.writeFieldBegin(TIER_FIELD_DESC);
          oprot.writeString(struct.tier);
          oprot.writeFieldEnd();
        }
      }
      if (struct.verified != null) {
        if (struct.isSetVerified()) {
          oprot.writeFieldBegin(VERIFIED_FIELD_DESC);
          oprot.writeString(struct.verified);
          oprot.writeFieldEnd();
        }
      }
      if (struct.publications != null) {
        if (struct.isSetPublications()) {
          oprot.writeFieldBegin(PUBLICATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.publications.size()));
            for (Publication _iter6 : struct.publications)
            {
              _iter6.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.funding != null) {
        if (struct.isSetFunding()) {
          oprot.writeFieldBegin(FUNDING_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.funding.size()));
            for (String _iter7 : struct.funding)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.institution != null) {
        if (struct.isSetInstitution()) {
          oprot.writeFieldBegin(INSTITUTION_FIELD_DESC);
          struct.institution.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserProfileTupleSchemeFactory implements SchemeFactory {
    public UserProfileTupleScheme getScheme() {
      return new UserProfileTupleScheme();
    }
  }

  private static class UserProfileTupleScheme extends TupleScheme<UserProfile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserModelVersion()) {
        optionals.set(0);
      }
      if (struct.isSetAiravataInternalUserId()) {
        optionals.set(1);
      }
      if (struct.isSetEmail()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      if (struct.isSetTier()) {
        optionals.set(4);
      }
      if (struct.isSetVerified()) {
        optionals.set(5);
      }
      if (struct.isSetPublications()) {
        optionals.set(6);
      }
      if (struct.isSetFunding()) {
        optionals.set(7);
      }
      if (struct.isSetInstitution()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUserModelVersion()) {
        oprot.writeString(struct.userModelVersion);
      }
      if (struct.isSetAiravataInternalUserId()) {
        oprot.writeString(struct.airavataInternalUserId);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTier()) {
        oprot.writeString(struct.tier);
      }
      if (struct.isSetVerified()) {
        oprot.writeString(struct.verified);
      }
      if (struct.isSetPublications()) {
        {
          oprot.writeI32(struct.publications.size());
          for (Publication _iter8 : struct.publications)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetFunding()) {
        {
          oprot.writeI32(struct.funding.size());
          for (String _iter9 : struct.funding)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetInstitution()) {
        struct.institution.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.userModelVersion = iprot.readString();
        struct.setUserModelVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.airavataInternalUserId = iprot.readString();
        struct.setAiravataInternalUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tier = iprot.readString();
        struct.setTierIsSet(true);
      }
      if (incoming.get(5)) {
        struct.verified = iprot.readString();
        struct.setVerifiedIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.publications = new ArrayList<Publication>(_list10.size);
          Publication _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new Publication();
            _elem11.read(iprot);
            struct.publications.add(_elem11);
          }
        }
        struct.setPublicationsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.funding = new ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.funding.add(_elem14);
          }
        }
        struct.setFundingIsSet(true);
      }
      if (incoming.get(8)) {
        struct.institution = new Institution();
        struct.institution.read(iprot);
        struct.setInstitutionIsSet(true);
      }
    }
  }

}

