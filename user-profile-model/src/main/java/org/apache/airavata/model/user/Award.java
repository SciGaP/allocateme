/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.user;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-21")
public class Award implements org.apache.thrift.TBase<Award, Award._Fields>, java.io.Serializable, Cloneable, Comparable<Award> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Award");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PI_LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("piLastName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AWARDEE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("awardeeName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PI_FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("piFirstName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AWARDEE_STATE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("awardeeStateCode", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField AGENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("agency", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FUNDS_OBLIGATED_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("fundsObligatedAmt", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PUBLIC_ACCESS_MANDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publicAccessMandate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField AWARDEE_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("awardeeCity", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AwardStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AwardTupleSchemeFactory());
  }

  private String id; // optional
  private String piLastName; // optional
  private String title; // optional
  private String awardeeName; // optional
  private String piFirstName; // optional
  private String awardeeStateCode; // optional
  private String agency; // optional
  private String date; // optional
  private String fundsObligatedAmt; // optional
  private String publicAccessMandate; // optional
  private String awardeeCity; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PI_LAST_NAME((short)2, "piLastName"),
    TITLE((short)3, "title"),
    AWARDEE_NAME((short)4, "awardeeName"),
    PI_FIRST_NAME((short)5, "piFirstName"),
    AWARDEE_STATE_CODE((short)6, "awardeeStateCode"),
    AGENCY((short)7, "agency"),
    DATE((short)8, "date"),
    FUNDS_OBLIGATED_AMT((short)9, "fundsObligatedAmt"),
    PUBLIC_ACCESS_MANDATE((short)10, "publicAccessMandate"),
    AWARDEE_CITY((short)11, "awardeeCity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PI_LAST_NAME
          return PI_LAST_NAME;
        case 3: // TITLE
          return TITLE;
        case 4: // AWARDEE_NAME
          return AWARDEE_NAME;
        case 5: // PI_FIRST_NAME
          return PI_FIRST_NAME;
        case 6: // AWARDEE_STATE_CODE
          return AWARDEE_STATE_CODE;
        case 7: // AGENCY
          return AGENCY;
        case 8: // DATE
          return DATE;
        case 9: // FUNDS_OBLIGATED_AMT
          return FUNDS_OBLIGATED_AMT;
        case 10: // PUBLIC_ACCESS_MANDATE
          return PUBLIC_ACCESS_MANDATE;
        case 11: // AWARDEE_CITY
          return AWARDEE_CITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ID,_Fields.PI_LAST_NAME,_Fields.TITLE,_Fields.AWARDEE_NAME,_Fields.PI_FIRST_NAME,_Fields.AWARDEE_STATE_CODE,_Fields.AGENCY,_Fields.DATE,_Fields.FUNDS_OBLIGATED_AMT,_Fields.PUBLIC_ACCESS_MANDATE,_Fields.AWARDEE_CITY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PI_LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("piLastName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AWARDEE_NAME, new org.apache.thrift.meta_data.FieldMetaData("awardeeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PI_FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("piFirstName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AWARDEE_STATE_CODE, new org.apache.thrift.meta_data.FieldMetaData("awardeeStateCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENCY, new org.apache.thrift.meta_data.FieldMetaData("agency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNDS_OBLIGATED_AMT, new org.apache.thrift.meta_data.FieldMetaData("fundsObligatedAmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLIC_ACCESS_MANDATE, new org.apache.thrift.meta_data.FieldMetaData("publicAccessMandate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AWARDEE_CITY, new org.apache.thrift.meta_data.FieldMetaData("awardeeCity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Award.class, metaDataMap);
  }

  public Award() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Award(Award other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetPiLastName()) {
      this.piLastName = other.piLastName;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetAwardeeName()) {
      this.awardeeName = other.awardeeName;
    }
    if (other.isSetPiFirstName()) {
      this.piFirstName = other.piFirstName;
    }
    if (other.isSetAwardeeStateCode()) {
      this.awardeeStateCode = other.awardeeStateCode;
    }
    if (other.isSetAgency()) {
      this.agency = other.agency;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetFundsObligatedAmt()) {
      this.fundsObligatedAmt = other.fundsObligatedAmt;
    }
    if (other.isSetPublicAccessMandate()) {
      this.publicAccessMandate = other.publicAccessMandate;
    }
    if (other.isSetAwardeeCity()) {
      this.awardeeCity = other.awardeeCity;
    }
  }

  public Award deepCopy() {
    return new Award(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.piLastName = null;
    this.title = null;
    this.awardeeName = null;
    this.piFirstName = null;
    this.awardeeStateCode = null;
    this.agency = null;
    this.date = null;
    this.fundsObligatedAmt = null;
    this.publicAccessMandate = null;
    this.awardeeCity = null;
  }

  public String getId() {
    return this.id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getPiLastName() {
    return this.piLastName;
  }

  public void setPiLastName(String piLastName) {
    this.piLastName = piLastName;
  }

  public void unsetPiLastName() {
    this.piLastName = null;
  }

  /** Returns true if field piLastName is set (has been assigned a value) and false otherwise */
  public boolean isSetPiLastName() {
    return this.piLastName != null;
  }

  public void setPiLastNameIsSet(boolean value) {
    if (!value) {
      this.piLastName = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getAwardeeName() {
    return this.awardeeName;
  }

  public void setAwardeeName(String awardeeName) {
    this.awardeeName = awardeeName;
  }

  public void unsetAwardeeName() {
    this.awardeeName = null;
  }

  /** Returns true if field awardeeName is set (has been assigned a value) and false otherwise */
  public boolean isSetAwardeeName() {
    return this.awardeeName != null;
  }

  public void setAwardeeNameIsSet(boolean value) {
    if (!value) {
      this.awardeeName = null;
    }
  }

  public String getPiFirstName() {
    return this.piFirstName;
  }

  public void setPiFirstName(String piFirstName) {
    this.piFirstName = piFirstName;
  }

  public void unsetPiFirstName() {
    this.piFirstName = null;
  }

  /** Returns true if field piFirstName is set (has been assigned a value) and false otherwise */
  public boolean isSetPiFirstName() {
    return this.piFirstName != null;
  }

  public void setPiFirstNameIsSet(boolean value) {
    if (!value) {
      this.piFirstName = null;
    }
  }

  public String getAwardeeStateCode() {
    return this.awardeeStateCode;
  }

  public void setAwardeeStateCode(String awardeeStateCode) {
    this.awardeeStateCode = awardeeStateCode;
  }

  public void unsetAwardeeStateCode() {
    this.awardeeStateCode = null;
  }

  /** Returns true if field awardeeStateCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAwardeeStateCode() {
    return this.awardeeStateCode != null;
  }

  public void setAwardeeStateCodeIsSet(boolean value) {
    if (!value) {
      this.awardeeStateCode = null;
    }
  }

  public String getAgency() {
    return this.agency;
  }

  public void setAgency(String agency) {
    this.agency = agency;
  }

  public void unsetAgency() {
    this.agency = null;
  }

  /** Returns true if field agency is set (has been assigned a value) and false otherwise */
  public boolean isSetAgency() {
    return this.agency != null;
  }

  public void setAgencyIsSet(boolean value) {
    if (!value) {
      this.agency = null;
    }
  }

  public String getDate() {
    return this.date;
  }

  public void setDate(String date) {
    this.date = date;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public String getFundsObligatedAmt() {
    return this.fundsObligatedAmt;
  }

  public void setFundsObligatedAmt(String fundsObligatedAmt) {
    this.fundsObligatedAmt = fundsObligatedAmt;
  }

  public void unsetFundsObligatedAmt() {
    this.fundsObligatedAmt = null;
  }

  /** Returns true if field fundsObligatedAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetFundsObligatedAmt() {
    return this.fundsObligatedAmt != null;
  }

  public void setFundsObligatedAmtIsSet(boolean value) {
    if (!value) {
      this.fundsObligatedAmt = null;
    }
  }

  public String getPublicAccessMandate() {
    return this.publicAccessMandate;
  }

  public void setPublicAccessMandate(String publicAccessMandate) {
    this.publicAccessMandate = publicAccessMandate;
  }

  public void unsetPublicAccessMandate() {
    this.publicAccessMandate = null;
  }

  /** Returns true if field publicAccessMandate is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicAccessMandate() {
    return this.publicAccessMandate != null;
  }

  public void setPublicAccessMandateIsSet(boolean value) {
    if (!value) {
      this.publicAccessMandate = null;
    }
  }

  public String getAwardeeCity() {
    return this.awardeeCity;
  }

  public void setAwardeeCity(String awardeeCity) {
    this.awardeeCity = awardeeCity;
  }

  public void unsetAwardeeCity() {
    this.awardeeCity = null;
  }

  /** Returns true if field awardeeCity is set (has been assigned a value) and false otherwise */
  public boolean isSetAwardeeCity() {
    return this.awardeeCity != null;
  }

  public void setAwardeeCityIsSet(boolean value) {
    if (!value) {
      this.awardeeCity = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case PI_LAST_NAME:
      if (value == null) {
        unsetPiLastName();
      } else {
        setPiLastName((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case AWARDEE_NAME:
      if (value == null) {
        unsetAwardeeName();
      } else {
        setAwardeeName((String)value);
      }
      break;

    case PI_FIRST_NAME:
      if (value == null) {
        unsetPiFirstName();
      } else {
        setPiFirstName((String)value);
      }
      break;

    case AWARDEE_STATE_CODE:
      if (value == null) {
        unsetAwardeeStateCode();
      } else {
        setAwardeeStateCode((String)value);
      }
      break;

    case AGENCY:
      if (value == null) {
        unsetAgency();
      } else {
        setAgency((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case FUNDS_OBLIGATED_AMT:
      if (value == null) {
        unsetFundsObligatedAmt();
      } else {
        setFundsObligatedAmt((String)value);
      }
      break;

    case PUBLIC_ACCESS_MANDATE:
      if (value == null) {
        unsetPublicAccessMandate();
      } else {
        setPublicAccessMandate((String)value);
      }
      break;

    case AWARDEE_CITY:
      if (value == null) {
        unsetAwardeeCity();
      } else {
        setAwardeeCity((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PI_LAST_NAME:
      return getPiLastName();

    case TITLE:
      return getTitle();

    case AWARDEE_NAME:
      return getAwardeeName();

    case PI_FIRST_NAME:
      return getPiFirstName();

    case AWARDEE_STATE_CODE:
      return getAwardeeStateCode();

    case AGENCY:
      return getAgency();

    case DATE:
      return getDate();

    case FUNDS_OBLIGATED_AMT:
      return getFundsObligatedAmt();

    case PUBLIC_ACCESS_MANDATE:
      return getPublicAccessMandate();

    case AWARDEE_CITY:
      return getAwardeeCity();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PI_LAST_NAME:
      return isSetPiLastName();
    case TITLE:
      return isSetTitle();
    case AWARDEE_NAME:
      return isSetAwardeeName();
    case PI_FIRST_NAME:
      return isSetPiFirstName();
    case AWARDEE_STATE_CODE:
      return isSetAwardeeStateCode();
    case AGENCY:
      return isSetAgency();
    case DATE:
      return isSetDate();
    case FUNDS_OBLIGATED_AMT:
      return isSetFundsObligatedAmt();
    case PUBLIC_ACCESS_MANDATE:
      return isSetPublicAccessMandate();
    case AWARDEE_CITY:
      return isSetAwardeeCity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Award)
      return this.equals((Award)that);
    return false;
  }

  public boolean equals(Award that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_piLastName = true && this.isSetPiLastName();
    boolean that_present_piLastName = true && that.isSetPiLastName();
    if (this_present_piLastName || that_present_piLastName) {
      if (!(this_present_piLastName && that_present_piLastName))
        return false;
      if (!this.piLastName.equals(that.piLastName))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_awardeeName = true && this.isSetAwardeeName();
    boolean that_present_awardeeName = true && that.isSetAwardeeName();
    if (this_present_awardeeName || that_present_awardeeName) {
      if (!(this_present_awardeeName && that_present_awardeeName))
        return false;
      if (!this.awardeeName.equals(that.awardeeName))
        return false;
    }

    boolean this_present_piFirstName = true && this.isSetPiFirstName();
    boolean that_present_piFirstName = true && that.isSetPiFirstName();
    if (this_present_piFirstName || that_present_piFirstName) {
      if (!(this_present_piFirstName && that_present_piFirstName))
        return false;
      if (!this.piFirstName.equals(that.piFirstName))
        return false;
    }

    boolean this_present_awardeeStateCode = true && this.isSetAwardeeStateCode();
    boolean that_present_awardeeStateCode = true && that.isSetAwardeeStateCode();
    if (this_present_awardeeStateCode || that_present_awardeeStateCode) {
      if (!(this_present_awardeeStateCode && that_present_awardeeStateCode))
        return false;
      if (!this.awardeeStateCode.equals(that.awardeeStateCode))
        return false;
    }

    boolean this_present_agency = true && this.isSetAgency();
    boolean that_present_agency = true && that.isSetAgency();
    if (this_present_agency || that_present_agency) {
      if (!(this_present_agency && that_present_agency))
        return false;
      if (!this.agency.equals(that.agency))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_fundsObligatedAmt = true && this.isSetFundsObligatedAmt();
    boolean that_present_fundsObligatedAmt = true && that.isSetFundsObligatedAmt();
    if (this_present_fundsObligatedAmt || that_present_fundsObligatedAmt) {
      if (!(this_present_fundsObligatedAmt && that_present_fundsObligatedAmt))
        return false;
      if (!this.fundsObligatedAmt.equals(that.fundsObligatedAmt))
        return false;
    }

    boolean this_present_publicAccessMandate = true && this.isSetPublicAccessMandate();
    boolean that_present_publicAccessMandate = true && that.isSetPublicAccessMandate();
    if (this_present_publicAccessMandate || that_present_publicAccessMandate) {
      if (!(this_present_publicAccessMandate && that_present_publicAccessMandate))
        return false;
      if (!this.publicAccessMandate.equals(that.publicAccessMandate))
        return false;
    }

    boolean this_present_awardeeCity = true && this.isSetAwardeeCity();
    boolean that_present_awardeeCity = true && that.isSetAwardeeCity();
    if (this_present_awardeeCity || that_present_awardeeCity) {
      if (!(this_present_awardeeCity && that_present_awardeeCity))
        return false;
      if (!this.awardeeCity.equals(that.awardeeCity))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_piLastName = true && (isSetPiLastName());
    list.add(present_piLastName);
    if (present_piLastName)
      list.add(piLastName);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_awardeeName = true && (isSetAwardeeName());
    list.add(present_awardeeName);
    if (present_awardeeName)
      list.add(awardeeName);

    boolean present_piFirstName = true && (isSetPiFirstName());
    list.add(present_piFirstName);
    if (present_piFirstName)
      list.add(piFirstName);

    boolean present_awardeeStateCode = true && (isSetAwardeeStateCode());
    list.add(present_awardeeStateCode);
    if (present_awardeeStateCode)
      list.add(awardeeStateCode);

    boolean present_agency = true && (isSetAgency());
    list.add(present_agency);
    if (present_agency)
      list.add(agency);

    boolean present_date = true && (isSetDate());
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_fundsObligatedAmt = true && (isSetFundsObligatedAmt());
    list.add(present_fundsObligatedAmt);
    if (present_fundsObligatedAmt)
      list.add(fundsObligatedAmt);

    boolean present_publicAccessMandate = true && (isSetPublicAccessMandate());
    list.add(present_publicAccessMandate);
    if (present_publicAccessMandate)
      list.add(publicAccessMandate);

    boolean present_awardeeCity = true && (isSetAwardeeCity());
    list.add(present_awardeeCity);
    if (present_awardeeCity)
      list.add(awardeeCity);

    return list.hashCode();
  }

  @Override
  public int compareTo(Award other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPiLastName()).compareTo(other.isSetPiLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPiLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.piLastName, other.piLastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAwardeeName()).compareTo(other.isSetAwardeeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwardeeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awardeeName, other.awardeeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPiFirstName()).compareTo(other.isSetPiFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPiFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.piFirstName, other.piFirstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAwardeeStateCode()).compareTo(other.isSetAwardeeStateCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwardeeStateCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awardeeStateCode, other.awardeeStateCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgency()).compareTo(other.isSetAgency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agency, other.agency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundsObligatedAmt()).compareTo(other.isSetFundsObligatedAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundsObligatedAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundsObligatedAmt, other.fundsObligatedAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicAccessMandate()).compareTo(other.isSetPublicAccessMandate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicAccessMandate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicAccessMandate, other.publicAccessMandate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAwardeeCity()).compareTo(other.isSetAwardeeCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwardeeCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awardeeCity, other.awardeeCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Award(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetPiLastName()) {
      if (!first) sb.append(", ");
      sb.append("piLastName:");
      if (this.piLastName == null) {
        sb.append("null");
      } else {
        sb.append(this.piLastName);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetAwardeeName()) {
      if (!first) sb.append(", ");
      sb.append("awardeeName:");
      if (this.awardeeName == null) {
        sb.append("null");
      } else {
        sb.append(this.awardeeName);
      }
      first = false;
    }
    if (isSetPiFirstName()) {
      if (!first) sb.append(", ");
      sb.append("piFirstName:");
      if (this.piFirstName == null) {
        sb.append("null");
      } else {
        sb.append(this.piFirstName);
      }
      first = false;
    }
    if (isSetAwardeeStateCode()) {
      if (!first) sb.append(", ");
      sb.append("awardeeStateCode:");
      if (this.awardeeStateCode == null) {
        sb.append("null");
      } else {
        sb.append(this.awardeeStateCode);
      }
      first = false;
    }
    if (isSetAgency()) {
      if (!first) sb.append(", ");
      sb.append("agency:");
      if (this.agency == null) {
        sb.append("null");
      } else {
        sb.append(this.agency);
      }
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetFundsObligatedAmt()) {
      if (!first) sb.append(", ");
      sb.append("fundsObligatedAmt:");
      if (this.fundsObligatedAmt == null) {
        sb.append("null");
      } else {
        sb.append(this.fundsObligatedAmt);
      }
      first = false;
    }
    if (isSetPublicAccessMandate()) {
      if (!first) sb.append(", ");
      sb.append("publicAccessMandate:");
      if (this.publicAccessMandate == null) {
        sb.append("null");
      } else {
        sb.append(this.publicAccessMandate);
      }
      first = false;
    }
    if (isSetAwardeeCity()) {
      if (!first) sb.append(", ");
      sb.append("awardeeCity:");
      if (this.awardeeCity == null) {
        sb.append("null");
      } else {
        sb.append(this.awardeeCity);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AwardStandardSchemeFactory implements SchemeFactory {
    public AwardStandardScheme getScheme() {
      return new AwardStandardScheme();
    }
  }

  private static class AwardStandardScheme extends StandardScheme<Award> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Award struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PI_LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.piLastName = iprot.readString();
              struct.setPiLastNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AWARDEE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.awardeeName = iprot.readString();
              struct.setAwardeeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PI_FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.piFirstName = iprot.readString();
              struct.setPiFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AWARDEE_STATE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.awardeeStateCode = iprot.readString();
              struct.setAwardeeStateCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AGENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agency = iprot.readString();
              struct.setAgencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FUNDS_OBLIGATED_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fundsObligatedAmt = iprot.readString();
              struct.setFundsObligatedAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PUBLIC_ACCESS_MANDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicAccessMandate = iprot.readString();
              struct.setPublicAccessMandateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AWARDEE_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.awardeeCity = iprot.readString();
              struct.setAwardeeCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Award struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.piLastName != null) {
        if (struct.isSetPiLastName()) {
          oprot.writeFieldBegin(PI_LAST_NAME_FIELD_DESC);
          oprot.writeString(struct.piLastName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.awardeeName != null) {
        if (struct.isSetAwardeeName()) {
          oprot.writeFieldBegin(AWARDEE_NAME_FIELD_DESC);
          oprot.writeString(struct.awardeeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.piFirstName != null) {
        if (struct.isSetPiFirstName()) {
          oprot.writeFieldBegin(PI_FIRST_NAME_FIELD_DESC);
          oprot.writeString(struct.piFirstName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.awardeeStateCode != null) {
        if (struct.isSetAwardeeStateCode()) {
          oprot.writeFieldBegin(AWARDEE_STATE_CODE_FIELD_DESC);
          oprot.writeString(struct.awardeeStateCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.agency != null) {
        if (struct.isSetAgency()) {
          oprot.writeFieldBegin(AGENCY_FIELD_DESC);
          oprot.writeString(struct.agency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fundsObligatedAmt != null) {
        if (struct.isSetFundsObligatedAmt()) {
          oprot.writeFieldBegin(FUNDS_OBLIGATED_AMT_FIELD_DESC);
          oprot.writeString(struct.fundsObligatedAmt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.publicAccessMandate != null) {
        if (struct.isSetPublicAccessMandate()) {
          oprot.writeFieldBegin(PUBLIC_ACCESS_MANDATE_FIELD_DESC);
          oprot.writeString(struct.publicAccessMandate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.awardeeCity != null) {
        if (struct.isSetAwardeeCity()) {
          oprot.writeFieldBegin(AWARDEE_CITY_FIELD_DESC);
          oprot.writeString(struct.awardeeCity);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AwardTupleSchemeFactory implements SchemeFactory {
    public AwardTupleScheme getScheme() {
      return new AwardTupleScheme();
    }
  }

  private static class AwardTupleScheme extends TupleScheme<Award> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Award struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPiLastName()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetAwardeeName()) {
        optionals.set(3);
      }
      if (struct.isSetPiFirstName()) {
        optionals.set(4);
      }
      if (struct.isSetAwardeeStateCode()) {
        optionals.set(5);
      }
      if (struct.isSetAgency()) {
        optionals.set(6);
      }
      if (struct.isSetDate()) {
        optionals.set(7);
      }
      if (struct.isSetFundsObligatedAmt()) {
        optionals.set(8);
      }
      if (struct.isSetPublicAccessMandate()) {
        optionals.set(9);
      }
      if (struct.isSetAwardeeCity()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetPiLastName()) {
        oprot.writeString(struct.piLastName);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetAwardeeName()) {
        oprot.writeString(struct.awardeeName);
      }
      if (struct.isSetPiFirstName()) {
        oprot.writeString(struct.piFirstName);
      }
      if (struct.isSetAwardeeStateCode()) {
        oprot.writeString(struct.awardeeStateCode);
      }
      if (struct.isSetAgency()) {
        oprot.writeString(struct.agency);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetFundsObligatedAmt()) {
        oprot.writeString(struct.fundsObligatedAmt);
      }
      if (struct.isSetPublicAccessMandate()) {
        oprot.writeString(struct.publicAccessMandate);
      }
      if (struct.isSetAwardeeCity()) {
        oprot.writeString(struct.awardeeCity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Award struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.piLastName = iprot.readString();
        struct.setPiLastNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.awardeeName = iprot.readString();
        struct.setAwardeeNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.piFirstName = iprot.readString();
        struct.setPiFirstNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.awardeeStateCode = iprot.readString();
        struct.setAwardeeStateCodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.agency = iprot.readString();
        struct.setAgencyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fundsObligatedAmt = iprot.readString();
        struct.setFundsObligatedAmtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.publicAccessMandate = iprot.readString();
        struct.setPublicAccessMandateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.awardeeCity = iprot.readString();
        struct.setAwardeeCityIsSet(true);
      }
    }
  }

}

