/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.model.user;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A structure holding the user profile and its child models.
 * 
 * userModelVersion:
 *  Version number of profile
 * 
 * airavataInternalUserId:
 *  internal to Airavata, not intended to be used outside of the Airavata platform or possibly by gateways
 *  (that is, never shown to users), never reassigned, REQUIRED
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-20")
public class UserProfile implements org.apache.thrift.TBase<UserProfile, UserProfile._Fields>, java.io.Serializable, Cloneable, Comparable<UserProfile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserProfile");

  private static final org.apache.thrift.protocol.TField USER_MODEL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("userModelVersion", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AIRAVATA_INTERNAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataInternalUserId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPEN_ID_CONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("openIdConnect", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SAML_FIELD_DESC = new org.apache.thrift.protocol.TField("saml", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OFFICIAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("officialName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PREFERRED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("preferredName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField GIVEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("givenName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FAMILY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("familyName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserProfileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserProfileTupleSchemeFactory());
  }

  private String userModelVersion; // optional
  private String airavataInternalUserId; // optional
  private String email; // optional
  private String openIdConnect; // optional
  private String saml; // optional
  private String officialName; // optional
  private String preferredName; // optional
  private String givenName; // optional
  private String familyName; // optional
  private String displayName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_MODEL_VERSION((short)1, "userModelVersion"),
    AIRAVATA_INTERNAL_USER_ID((short)2, "airavataInternalUserId"),
    EMAIL((short)3, "email"),
    OPEN_ID_CONNECT((short)4, "openIdConnect"),
    SAML((short)5, "saml"),
    OFFICIAL_NAME((short)6, "officialName"),
    PREFERRED_NAME((short)7, "preferredName"),
    GIVEN_NAME((short)8, "givenName"),
    FAMILY_NAME((short)9, "familyName"),
    DISPLAY_NAME((short)10, "displayName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_MODEL_VERSION
          return USER_MODEL_VERSION;
        case 2: // AIRAVATA_INTERNAL_USER_ID
          return AIRAVATA_INTERNAL_USER_ID;
        case 3: // EMAIL
          return EMAIL;
        case 4: // OPEN_ID_CONNECT
          return OPEN_ID_CONNECT;
        case 5: // SAML
          return SAML;
        case 6: // OFFICIAL_NAME
          return OFFICIAL_NAME;
        case 7: // PREFERRED_NAME
          return PREFERRED_NAME;
        case 8: // GIVEN_NAME
          return GIVEN_NAME;
        case 9: // FAMILY_NAME
          return FAMILY_NAME;
        case 10: // DISPLAY_NAME
          return DISPLAY_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.USER_MODEL_VERSION,_Fields.AIRAVATA_INTERNAL_USER_ID,_Fields.EMAIL,_Fields.OPEN_ID_CONNECT,_Fields.SAML,_Fields.OFFICIAL_NAME,_Fields.PREFERRED_NAME,_Fields.GIVEN_NAME,_Fields.FAMILY_NAME,_Fields.DISPLAY_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_MODEL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("userModelVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AIRAVATA_INTERNAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataInternalUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_ID_CONNECT, new org.apache.thrift.meta_data.FieldMetaData("openIdConnect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAML, new org.apache.thrift.meta_data.FieldMetaData("saml", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICIAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("officialName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREFERRED_NAME, new org.apache.thrift.meta_data.FieldMetaData("preferredName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GIVEN_NAME, new org.apache.thrift.meta_data.FieldMetaData("givenName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAMILY_NAME, new org.apache.thrift.meta_data.FieldMetaData("familyName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserProfile.class, metaDataMap);
  }

  public UserProfile() {
    this.userModelVersion = "1.0";

    this.airavataInternalUserId = "DO_NOT_ADD_AT_CLIENT";

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserProfile(UserProfile other) {
    if (other.isSetUserModelVersion()) {
      this.userModelVersion = other.userModelVersion;
    }
    if (other.isSetAiravataInternalUserId()) {
      this.airavataInternalUserId = other.airavataInternalUserId;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetOpenIdConnect()) {
      this.openIdConnect = other.openIdConnect;
    }
    if (other.isSetSaml()) {
      this.saml = other.saml;
    }
    if (other.isSetOfficialName()) {
      this.officialName = other.officialName;
    }
    if (other.isSetPreferredName()) {
      this.preferredName = other.preferredName;
    }
    if (other.isSetGivenName()) {
      this.givenName = other.givenName;
    }
    if (other.isSetFamilyName()) {
      this.familyName = other.familyName;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
  }

  public UserProfile deepCopy() {
    return new UserProfile(this);
  }

  @Override
  public void clear() {
    this.userModelVersion = "1.0";

    this.airavataInternalUserId = "DO_NOT_ADD_AT_CLIENT";

    this.email = null;
    this.openIdConnect = null;
    this.saml = null;
    this.officialName = null;
    this.preferredName = null;
    this.givenName = null;
    this.familyName = null;
    this.displayName = null;
  }

  public String getUserModelVersion() {
    return this.userModelVersion;
  }

  public void setUserModelVersion(String userModelVersion) {
    this.userModelVersion = userModelVersion;
  }

  public void unsetUserModelVersion() {
    this.userModelVersion = null;
  }

  /** Returns true if field userModelVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetUserModelVersion() {
    return this.userModelVersion != null;
  }

  public void setUserModelVersionIsSet(boolean value) {
    if (!value) {
      this.userModelVersion = null;
    }
  }

  public String getAiravataInternalUserId() {
    return this.airavataInternalUserId;
  }

  public void setAiravataInternalUserId(String airavataInternalUserId) {
    this.airavataInternalUserId = airavataInternalUserId;
  }

  public void unsetAiravataInternalUserId() {
    this.airavataInternalUserId = null;
  }

  /** Returns true if field airavataInternalUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetAiravataInternalUserId() {
    return this.airavataInternalUserId != null;
  }

  public void setAiravataInternalUserIdIsSet(boolean value) {
    if (!value) {
      this.airavataInternalUserId = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getOpenIdConnect() {
    return this.openIdConnect;
  }

  public void setOpenIdConnect(String openIdConnect) {
    this.openIdConnect = openIdConnect;
  }

  public void unsetOpenIdConnect() {
    this.openIdConnect = null;
  }

  /** Returns true if field openIdConnect is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenIdConnect() {
    return this.openIdConnect != null;
  }

  public void setOpenIdConnectIsSet(boolean value) {
    if (!value) {
      this.openIdConnect = null;
    }
  }

  public String getSaml() {
    return this.saml;
  }

  public void setSaml(String saml) {
    this.saml = saml;
  }

  public void unsetSaml() {
    this.saml = null;
  }

  /** Returns true if field saml is set (has been assigned a value) and false otherwise */
  public boolean isSetSaml() {
    return this.saml != null;
  }

  public void setSamlIsSet(boolean value) {
    if (!value) {
      this.saml = null;
    }
  }

  public String getOfficialName() {
    return this.officialName;
  }

  public void setOfficialName(String officialName) {
    this.officialName = officialName;
  }

  public void unsetOfficialName() {
    this.officialName = null;
  }

  /** Returns true if field officialName is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficialName() {
    return this.officialName != null;
  }

  public void setOfficialNameIsSet(boolean value) {
    if (!value) {
      this.officialName = null;
    }
  }

  public String getPreferredName() {
    return this.preferredName;
  }

  public void setPreferredName(String preferredName) {
    this.preferredName = preferredName;
  }

  public void unsetPreferredName() {
    this.preferredName = null;
  }

  /** Returns true if field preferredName is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferredName() {
    return this.preferredName != null;
  }

  public void setPreferredNameIsSet(boolean value) {
    if (!value) {
      this.preferredName = null;
    }
  }

  public String getGivenName() {
    return this.givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }

  public void unsetGivenName() {
    this.givenName = null;
  }

  /** Returns true if field givenName is set (has been assigned a value) and false otherwise */
  public boolean isSetGivenName() {
    return this.givenName != null;
  }

  public void setGivenNameIsSet(boolean value) {
    if (!value) {
      this.givenName = null;
    }
  }

  public String getFamilyName() {
    return this.familyName;
  }

  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }

  public void unsetFamilyName() {
    this.familyName = null;
  }

  /** Returns true if field familyName is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyName() {
    return this.familyName != null;
  }

  public void setFamilyNameIsSet(boolean value) {
    if (!value) {
      this.familyName = null;
    }
  }

  public String getDisplayName() {
    return this.displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_MODEL_VERSION:
      if (value == null) {
        unsetUserModelVersion();
      } else {
        setUserModelVersion((String)value);
      }
      break;

    case AIRAVATA_INTERNAL_USER_ID:
      if (value == null) {
        unsetAiravataInternalUserId();
      } else {
        setAiravataInternalUserId((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case OPEN_ID_CONNECT:
      if (value == null) {
        unsetOpenIdConnect();
      } else {
        setOpenIdConnect((String)value);
      }
      break;

    case SAML:
      if (value == null) {
        unsetSaml();
      } else {
        setSaml((String)value);
      }
      break;

    case OFFICIAL_NAME:
      if (value == null) {
        unsetOfficialName();
      } else {
        setOfficialName((String)value);
      }
      break;

    case PREFERRED_NAME:
      if (value == null) {
        unsetPreferredName();
      } else {
        setPreferredName((String)value);
      }
      break;

    case GIVEN_NAME:
      if (value == null) {
        unsetGivenName();
      } else {
        setGivenName((String)value);
      }
      break;

    case FAMILY_NAME:
      if (value == null) {
        unsetFamilyName();
      } else {
        setFamilyName((String)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_MODEL_VERSION:
      return getUserModelVersion();

    case AIRAVATA_INTERNAL_USER_ID:
      return getAiravataInternalUserId();

    case EMAIL:
      return getEmail();

    case OPEN_ID_CONNECT:
      return getOpenIdConnect();

    case SAML:
      return getSaml();

    case OFFICIAL_NAME:
      return getOfficialName();

    case PREFERRED_NAME:
      return getPreferredName();

    case GIVEN_NAME:
      return getGivenName();

    case FAMILY_NAME:
      return getFamilyName();

    case DISPLAY_NAME:
      return getDisplayName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_MODEL_VERSION:
      return isSetUserModelVersion();
    case AIRAVATA_INTERNAL_USER_ID:
      return isSetAiravataInternalUserId();
    case EMAIL:
      return isSetEmail();
    case OPEN_ID_CONNECT:
      return isSetOpenIdConnect();
    case SAML:
      return isSetSaml();
    case OFFICIAL_NAME:
      return isSetOfficialName();
    case PREFERRED_NAME:
      return isSetPreferredName();
    case GIVEN_NAME:
      return isSetGivenName();
    case FAMILY_NAME:
      return isSetFamilyName();
    case DISPLAY_NAME:
      return isSetDisplayName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserProfile)
      return this.equals((UserProfile)that);
    return false;
  }

  public boolean equals(UserProfile that) {
    if (that == null)
      return false;

    boolean this_present_userModelVersion = true && this.isSetUserModelVersion();
    boolean that_present_userModelVersion = true && that.isSetUserModelVersion();
    if (this_present_userModelVersion || that_present_userModelVersion) {
      if (!(this_present_userModelVersion && that_present_userModelVersion))
        return false;
      if (!this.userModelVersion.equals(that.userModelVersion))
        return false;
    }

    boolean this_present_airavataInternalUserId = true && this.isSetAiravataInternalUserId();
    boolean that_present_airavataInternalUserId = true && that.isSetAiravataInternalUserId();
    if (this_present_airavataInternalUserId || that_present_airavataInternalUserId) {
      if (!(this_present_airavataInternalUserId && that_present_airavataInternalUserId))
        return false;
      if (!this.airavataInternalUserId.equals(that.airavataInternalUserId))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_openIdConnect = true && this.isSetOpenIdConnect();
    boolean that_present_openIdConnect = true && that.isSetOpenIdConnect();
    if (this_present_openIdConnect || that_present_openIdConnect) {
      if (!(this_present_openIdConnect && that_present_openIdConnect))
        return false;
      if (!this.openIdConnect.equals(that.openIdConnect))
        return false;
    }

    boolean this_present_saml = true && this.isSetSaml();
    boolean that_present_saml = true && that.isSetSaml();
    if (this_present_saml || that_present_saml) {
      if (!(this_present_saml && that_present_saml))
        return false;
      if (!this.saml.equals(that.saml))
        return false;
    }

    boolean this_present_officialName = true && this.isSetOfficialName();
    boolean that_present_officialName = true && that.isSetOfficialName();
    if (this_present_officialName || that_present_officialName) {
      if (!(this_present_officialName && that_present_officialName))
        return false;
      if (!this.officialName.equals(that.officialName))
        return false;
    }

    boolean this_present_preferredName = true && this.isSetPreferredName();
    boolean that_present_preferredName = true && that.isSetPreferredName();
    if (this_present_preferredName || that_present_preferredName) {
      if (!(this_present_preferredName && that_present_preferredName))
        return false;
      if (!this.preferredName.equals(that.preferredName))
        return false;
    }

    boolean this_present_givenName = true && this.isSetGivenName();
    boolean that_present_givenName = true && that.isSetGivenName();
    if (this_present_givenName || that_present_givenName) {
      if (!(this_present_givenName && that_present_givenName))
        return false;
      if (!this.givenName.equals(that.givenName))
        return false;
    }

    boolean this_present_familyName = true && this.isSetFamilyName();
    boolean that_present_familyName = true && that.isSetFamilyName();
    if (this_present_familyName || that_present_familyName) {
      if (!(this_present_familyName && that_present_familyName))
        return false;
      if (!this.familyName.equals(that.familyName))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userModelVersion = true && (isSetUserModelVersion());
    list.add(present_userModelVersion);
    if (present_userModelVersion)
      list.add(userModelVersion);

    boolean present_airavataInternalUserId = true && (isSetAiravataInternalUserId());
    list.add(present_airavataInternalUserId);
    if (present_airavataInternalUserId)
      list.add(airavataInternalUserId);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_openIdConnect = true && (isSetOpenIdConnect());
    list.add(present_openIdConnect);
    if (present_openIdConnect)
      list.add(openIdConnect);

    boolean present_saml = true && (isSetSaml());
    list.add(present_saml);
    if (present_saml)
      list.add(saml);

    boolean present_officialName = true && (isSetOfficialName());
    list.add(present_officialName);
    if (present_officialName)
      list.add(officialName);

    boolean present_preferredName = true && (isSetPreferredName());
    list.add(present_preferredName);
    if (present_preferredName)
      list.add(preferredName);

    boolean present_givenName = true && (isSetGivenName());
    list.add(present_givenName);
    if (present_givenName)
      list.add(givenName);

    boolean present_familyName = true && (isSetFamilyName());
    list.add(present_familyName);
    if (present_familyName)
      list.add(familyName);

    boolean present_displayName = true && (isSetDisplayName());
    list.add(present_displayName);
    if (present_displayName)
      list.add(displayName);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserProfile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserModelVersion()).compareTo(other.isSetUserModelVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserModelVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userModelVersion, other.userModelVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAiravataInternalUserId()).compareTo(other.isSetAiravataInternalUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAiravataInternalUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataInternalUserId, other.airavataInternalUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenIdConnect()).compareTo(other.isSetOpenIdConnect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenIdConnect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openIdConnect, other.openIdConnect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaml()).compareTo(other.isSetSaml());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaml()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saml, other.saml);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfficialName()).compareTo(other.isSetOfficialName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficialName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officialName, other.officialName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreferredName()).compareTo(other.isSetPreferredName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferredName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferredName, other.preferredName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGivenName()).compareTo(other.isSetGivenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGivenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.givenName, other.givenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyName()).compareTo(other.isSetFamilyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyName, other.familyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(other.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, other.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserProfile(");
    boolean first = true;

    if (isSetUserModelVersion()) {
      sb.append("userModelVersion:");
      if (this.userModelVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.userModelVersion);
      }
      first = false;
    }
    if (isSetAiravataInternalUserId()) {
      if (!first) sb.append(", ");
      sb.append("airavataInternalUserId:");
      if (this.airavataInternalUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataInternalUserId);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetOpenIdConnect()) {
      if (!first) sb.append(", ");
      sb.append("openIdConnect:");
      if (this.openIdConnect == null) {
        sb.append("null");
      } else {
        sb.append(this.openIdConnect);
      }
      first = false;
    }
    if (isSetSaml()) {
      if (!first) sb.append(", ");
      sb.append("saml:");
      if (this.saml == null) {
        sb.append("null");
      } else {
        sb.append(this.saml);
      }
      first = false;
    }
    if (isSetOfficialName()) {
      if (!first) sb.append(", ");
      sb.append("officialName:");
      if (this.officialName == null) {
        sb.append("null");
      } else {
        sb.append(this.officialName);
      }
      first = false;
    }
    if (isSetPreferredName()) {
      if (!first) sb.append(", ");
      sb.append("preferredName:");
      if (this.preferredName == null) {
        sb.append("null");
      } else {
        sb.append(this.preferredName);
      }
      first = false;
    }
    if (isSetGivenName()) {
      if (!first) sb.append(", ");
      sb.append("givenName:");
      if (this.givenName == null) {
        sb.append("null");
      } else {
        sb.append(this.givenName);
      }
      first = false;
    }
    if (isSetFamilyName()) {
      if (!first) sb.append(", ");
      sb.append("familyName:");
      if (this.familyName == null) {
        sb.append("null");
      } else {
        sb.append(this.familyName);
      }
      first = false;
    }
    if (isSetDisplayName()) {
      if (!first) sb.append(", ");
      sb.append("displayName:");
      if (this.displayName == null) {
        sb.append("null");
      } else {
        sb.append(this.displayName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserProfileStandardSchemeFactory implements SchemeFactory {
    public UserProfileStandardScheme getScheme() {
      return new UserProfileStandardScheme();
    }
  }

  private static class UserProfileStandardScheme extends StandardScheme<UserProfile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserProfile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_MODEL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userModelVersion = iprot.readString();
              struct.setUserModelVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AIRAVATA_INTERNAL_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.airavataInternalUserId = iprot.readString();
              struct.setAiravataInternalUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPEN_ID_CONNECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openIdConnect = iprot.readString();
              struct.setOpenIdConnectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SAML
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saml = iprot.readString();
              struct.setSamlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OFFICIAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.officialName = iprot.readString();
              struct.setOfficialNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PREFERRED_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.preferredName = iprot.readString();
              struct.setPreferredNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GIVEN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.givenName = iprot.readString();
              struct.setGivenNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FAMILY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.familyName = iprot.readString();
              struct.setFamilyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserProfile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userModelVersion != null) {
        if (struct.isSetUserModelVersion()) {
          oprot.writeFieldBegin(USER_MODEL_VERSION_FIELD_DESC);
          oprot.writeString(struct.userModelVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.airavataInternalUserId != null) {
        if (struct.isSetAiravataInternalUserId()) {
          oprot.writeFieldBegin(AIRAVATA_INTERNAL_USER_ID_FIELD_DESC);
          oprot.writeString(struct.airavataInternalUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.openIdConnect != null) {
        if (struct.isSetOpenIdConnect()) {
          oprot.writeFieldBegin(OPEN_ID_CONNECT_FIELD_DESC);
          oprot.writeString(struct.openIdConnect);
          oprot.writeFieldEnd();
        }
      }
      if (struct.saml != null) {
        if (struct.isSetSaml()) {
          oprot.writeFieldBegin(SAML_FIELD_DESC);
          oprot.writeString(struct.saml);
          oprot.writeFieldEnd();
        }
      }
      if (struct.officialName != null) {
        if (struct.isSetOfficialName()) {
          oprot.writeFieldBegin(OFFICIAL_NAME_FIELD_DESC);
          oprot.writeString(struct.officialName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.preferredName != null) {
        if (struct.isSetPreferredName()) {
          oprot.writeFieldBegin(PREFERRED_NAME_FIELD_DESC);
          oprot.writeString(struct.preferredName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.givenName != null) {
        if (struct.isSetGivenName()) {
          oprot.writeFieldBegin(GIVEN_NAME_FIELD_DESC);
          oprot.writeString(struct.givenName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.familyName != null) {
        if (struct.isSetFamilyName()) {
          oprot.writeFieldBegin(FAMILY_NAME_FIELD_DESC);
          oprot.writeString(struct.familyName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.displayName != null) {
        if (struct.isSetDisplayName()) {
          oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
          oprot.writeString(struct.displayName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserProfileTupleSchemeFactory implements SchemeFactory {
    public UserProfileTupleScheme getScheme() {
      return new UserProfileTupleScheme();
    }
  }

  private static class UserProfileTupleScheme extends TupleScheme<UserProfile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserModelVersion()) {
        optionals.set(0);
      }
      if (struct.isSetAiravataInternalUserId()) {
        optionals.set(1);
      }
      if (struct.isSetEmail()) {
        optionals.set(2);
      }
      if (struct.isSetOpenIdConnect()) {
        optionals.set(3);
      }
      if (struct.isSetSaml()) {
        optionals.set(4);
      }
      if (struct.isSetOfficialName()) {
        optionals.set(5);
      }
      if (struct.isSetPreferredName()) {
        optionals.set(6);
      }
      if (struct.isSetGivenName()) {
        optionals.set(7);
      }
      if (struct.isSetFamilyName()) {
        optionals.set(8);
      }
      if (struct.isSetDisplayName()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetUserModelVersion()) {
        oprot.writeString(struct.userModelVersion);
      }
      if (struct.isSetAiravataInternalUserId()) {
        oprot.writeString(struct.airavataInternalUserId);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetOpenIdConnect()) {
        oprot.writeString(struct.openIdConnect);
      }
      if (struct.isSetSaml()) {
        oprot.writeString(struct.saml);
      }
      if (struct.isSetOfficialName()) {
        oprot.writeString(struct.officialName);
      }
      if (struct.isSetPreferredName()) {
        oprot.writeString(struct.preferredName);
      }
      if (struct.isSetGivenName()) {
        oprot.writeString(struct.givenName);
      }
      if (struct.isSetFamilyName()) {
        oprot.writeString(struct.familyName);
      }
      if (struct.isSetDisplayName()) {
        oprot.writeString(struct.displayName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.userModelVersion = iprot.readString();
        struct.setUserModelVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.airavataInternalUserId = iprot.readString();
        struct.setAiravataInternalUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(3)) {
        struct.openIdConnect = iprot.readString();
        struct.setOpenIdConnectIsSet(true);
      }
      if (incoming.get(4)) {
        struct.saml = iprot.readString();
        struct.setSamlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.officialName = iprot.readString();
        struct.setOfficialNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.preferredName = iprot.readString();
        struct.setPreferredNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.givenName = iprot.readString();
        struct.setGivenNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.familyName = iprot.readString();
        struct.setFamilyNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
      }
    }
  }

}

