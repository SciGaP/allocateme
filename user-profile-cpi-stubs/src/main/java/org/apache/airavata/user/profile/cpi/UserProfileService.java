/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.user.profile.cpi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-20")
public class UserProfileService {

  public interface Iface {

    /**
     * Query CS server to fetch the CPI version
     */
    public String getUserProfileSerbiceVersion() throws org.apache.thrift.TException;

    /**
     * This method is to add SSHCredential which will return the token Id in success
     * 
     * 
     * @param userProfile
     */
    public String registerUserProfile(org.apache.airavata.model.user.UserProfile userProfile) throws UserProfileServiceException, org.apache.thrift.TException;

    public org.apache.airavata.model.user.UserProfile getUserProfile(String airavataInternalUserId) throws UserProfileServiceException, org.apache.thrift.TException;

    public boolean deleteUserProfile(String airavataInternalUserId) throws UserProfileServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getUserProfileSerbiceVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerUserProfile(org.apache.airavata.model.user.UserProfile userProfile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserProfile(String airavataInternalUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteUserProfile(String airavataInternalUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getUserProfileSerbiceVersion() throws org.apache.thrift.TException
    {
      send_getUserProfileSerbiceVersion();
      return recv_getUserProfileSerbiceVersion();
    }

    public void send_getUserProfileSerbiceVersion() throws org.apache.thrift.TException
    {
      getUserProfileSerbiceVersion_args args = new getUserProfileSerbiceVersion_args();
      sendBase("getUserProfileSerbiceVersion", args);
    }

    public String recv_getUserProfileSerbiceVersion() throws org.apache.thrift.TException
    {
      getUserProfileSerbiceVersion_result result = new getUserProfileSerbiceVersion_result();
      receiveBase(result, "getUserProfileSerbiceVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserProfileSerbiceVersion failed: unknown result");
    }

    public String registerUserProfile(org.apache.airavata.model.user.UserProfile userProfile) throws UserProfileServiceException, org.apache.thrift.TException
    {
      send_registerUserProfile(userProfile);
      return recv_registerUserProfile();
    }

    public void send_registerUserProfile(org.apache.airavata.model.user.UserProfile userProfile) throws org.apache.thrift.TException
    {
      registerUserProfile_args args = new registerUserProfile_args();
      args.setUserProfile(userProfile);
      sendBase("registerUserProfile", args);
    }

    public String recv_registerUserProfile() throws UserProfileServiceException, org.apache.thrift.TException
    {
      registerUserProfile_result result = new registerUserProfile_result();
      receiveBase(result, "registerUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.upsException != null) {
        throw result.upsException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerUserProfile failed: unknown result");
    }

    public org.apache.airavata.model.user.UserProfile getUserProfile(String airavataInternalUserId) throws UserProfileServiceException, org.apache.thrift.TException
    {
      send_getUserProfile(airavataInternalUserId);
      return recv_getUserProfile();
    }

    public void send_getUserProfile(String airavataInternalUserId) throws org.apache.thrift.TException
    {
      getUserProfile_args args = new getUserProfile_args();
      args.setAiravataInternalUserId(airavataInternalUserId);
      sendBase("getUserProfile", args);
    }

    public org.apache.airavata.model.user.UserProfile recv_getUserProfile() throws UserProfileServiceException, org.apache.thrift.TException
    {
      getUserProfile_result result = new getUserProfile_result();
      receiveBase(result, "getUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.upsException != null) {
        throw result.upsException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserProfile failed: unknown result");
    }

    public boolean deleteUserProfile(String airavataInternalUserId) throws UserProfileServiceException, org.apache.thrift.TException
    {
      send_deleteUserProfile(airavataInternalUserId);
      return recv_deleteUserProfile();
    }

    public void send_deleteUserProfile(String airavataInternalUserId) throws org.apache.thrift.TException
    {
      deleteUserProfile_args args = new deleteUserProfile_args();
      args.setAiravataInternalUserId(airavataInternalUserId);
      sendBase("deleteUserProfile", args);
    }

    public boolean recv_deleteUserProfile() throws UserProfileServiceException, org.apache.thrift.TException
    {
      deleteUserProfile_result result = new deleteUserProfile_result();
      receiveBase(result, "deleteUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.upsException != null) {
        throw result.upsException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteUserProfile failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getUserProfileSerbiceVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserProfileSerbiceVersion_call method_call = new getUserProfileSerbiceVersion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserProfileSerbiceVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getUserProfileSerbiceVersion_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserProfileSerbiceVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserProfileSerbiceVersion_args args = new getUserProfileSerbiceVersion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserProfileSerbiceVersion();
      }
    }

    public void registerUserProfile(org.apache.airavata.model.user.UserProfile userProfile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerUserProfile_call method_call = new registerUserProfile_call(userProfile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private org.apache.airavata.model.user.UserProfile userProfile;
      public registerUserProfile_call(org.apache.airavata.model.user.UserProfile userProfile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userProfile = userProfile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerUserProfile_args args = new registerUserProfile_args();
        args.setUserProfile(userProfile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws UserProfileServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerUserProfile();
      }
    }

    public void getUserProfile(String airavataInternalUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserProfile_call method_call = new getUserProfile_call(airavataInternalUserId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataInternalUserId;
      public getUserProfile_call(String airavataInternalUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataInternalUserId = airavataInternalUserId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserProfile_args args = new getUserProfile_args();
        args.setAiravataInternalUserId(airavataInternalUserId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.model.user.UserProfile getResult() throws UserProfileServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserProfile();
      }
    }

    public void deleteUserProfile(String airavataInternalUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUserProfile_call method_call = new deleteUserProfile_call(airavataInternalUserId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String airavataInternalUserId;
      public deleteUserProfile_call(String airavataInternalUserId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.airavataInternalUserId = airavataInternalUserId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUserProfile_args args = new deleteUserProfile_args();
        args.setAiravataInternalUserId(airavataInternalUserId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws UserProfileServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteUserProfile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getUserProfileSerbiceVersion", new getUserProfileSerbiceVersion());
      processMap.put("registerUserProfile", new registerUserProfile());
      processMap.put("getUserProfile", new getUserProfile());
      processMap.put("deleteUserProfile", new deleteUserProfile());
      return processMap;
    }

    public static class getUserProfileSerbiceVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserProfileSerbiceVersion_args> {
      public getUserProfileSerbiceVersion() {
        super("getUserProfileSerbiceVersion");
      }

      public getUserProfileSerbiceVersion_args getEmptyArgsInstance() {
        return new getUserProfileSerbiceVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserProfileSerbiceVersion_result getResult(I iface, getUserProfileSerbiceVersion_args args) throws org.apache.thrift.TException {
        getUserProfileSerbiceVersion_result result = new getUserProfileSerbiceVersion_result();
        result.success = iface.getUserProfileSerbiceVersion();
        return result;
      }
    }

    public static class registerUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerUserProfile_args> {
      public registerUserProfile() {
        super("registerUserProfile");
      }

      public registerUserProfile_args getEmptyArgsInstance() {
        return new registerUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerUserProfile_result getResult(I iface, registerUserProfile_args args) throws org.apache.thrift.TException {
        registerUserProfile_result result = new registerUserProfile_result();
        try {
          result.success = iface.registerUserProfile(args.userProfile);
        } catch (UserProfileServiceException upsException) {
          result.upsException = upsException;
        }
        return result;
      }
    }

    public static class getUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserProfile_args> {
      public getUserProfile() {
        super("getUserProfile");
      }

      public getUserProfile_args getEmptyArgsInstance() {
        return new getUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserProfile_result getResult(I iface, getUserProfile_args args) throws org.apache.thrift.TException {
        getUserProfile_result result = new getUserProfile_result();
        try {
          result.success = iface.getUserProfile(args.airavataInternalUserId);
        } catch (UserProfileServiceException upsException) {
          result.upsException = upsException;
        }
        return result;
      }
    }

    public static class deleteUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUserProfile_args> {
      public deleteUserProfile() {
        super("deleteUserProfile");
      }

      public deleteUserProfile_args getEmptyArgsInstance() {
        return new deleteUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUserProfile_result getResult(I iface, deleteUserProfile_args args) throws org.apache.thrift.TException {
        deleteUserProfile_result result = new deleteUserProfile_result();
        try {
          result.success = iface.deleteUserProfile(args.airavataInternalUserId);
          result.setSuccessIsSet(true);
        } catch (UserProfileServiceException upsException) {
          result.upsException = upsException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getUserProfileSerbiceVersion", new getUserProfileSerbiceVersion());
      processMap.put("registerUserProfile", new registerUserProfile());
      processMap.put("getUserProfile", new getUserProfile());
      processMap.put("deleteUserProfile", new deleteUserProfile());
      return processMap;
    }

    public static class getUserProfileSerbiceVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserProfileSerbiceVersion_args, String> {
      public getUserProfileSerbiceVersion() {
        super("getUserProfileSerbiceVersion");
      }

      public getUserProfileSerbiceVersion_args getEmptyArgsInstance() {
        return new getUserProfileSerbiceVersion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getUserProfileSerbiceVersion_result result = new getUserProfileSerbiceVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserProfileSerbiceVersion_result result = new getUserProfileSerbiceVersion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserProfileSerbiceVersion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getUserProfileSerbiceVersion(resultHandler);
      }
    }

    public static class registerUserProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerUserProfile_args, String> {
      public registerUserProfile() {
        super("registerUserProfile");
      }

      public registerUserProfile_args getEmptyArgsInstance() {
        return new registerUserProfile_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            registerUserProfile_result result = new registerUserProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerUserProfile_result result = new registerUserProfile_result();
            if (e instanceof UserProfileServiceException) {
                        result.upsException = (UserProfileServiceException) e;
                        result.setUpsExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerUserProfile_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.registerUserProfile(args.userProfile,resultHandler);
      }
    }

    public static class getUserProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserProfile_args, org.apache.airavata.model.user.UserProfile> {
      public getUserProfile() {
        super("getUserProfile");
      }

      public getUserProfile_args getEmptyArgsInstance() {
        return new getUserProfile_args();
      }

      public AsyncMethodCallback<org.apache.airavata.model.user.UserProfile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.model.user.UserProfile>() { 
          public void onComplete(org.apache.airavata.model.user.UserProfile o) {
            getUserProfile_result result = new getUserProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserProfile_result result = new getUserProfile_result();
            if (e instanceof UserProfileServiceException) {
                        result.upsException = (UserProfileServiceException) e;
                        result.setUpsExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserProfile_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.user.UserProfile> resultHandler) throws TException {
        iface.getUserProfile(args.airavataInternalUserId,resultHandler);
      }
    }

    public static class deleteUserProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteUserProfile_args, Boolean> {
      public deleteUserProfile() {
        super("deleteUserProfile");
      }

      public deleteUserProfile_args getEmptyArgsInstance() {
        return new deleteUserProfile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteUserProfile_result result = new deleteUserProfile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteUserProfile_result result = new deleteUserProfile_result();
            if (e instanceof UserProfileServiceException) {
                        result.upsException = (UserProfileServiceException) e;
                        result.setUpsExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteUserProfile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteUserProfile(args.airavataInternalUserId,resultHandler);
      }
    }

  }

  public static class getUserProfileSerbiceVersion_args implements org.apache.thrift.TBase<getUserProfileSerbiceVersion_args, getUserProfileSerbiceVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserProfileSerbiceVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserProfileSerbiceVersion_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserProfileSerbiceVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserProfileSerbiceVersion_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfileSerbiceVersion_args.class, metaDataMap);
    }

    public getUserProfileSerbiceVersion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserProfileSerbiceVersion_args(getUserProfileSerbiceVersion_args other) {
    }

    public getUserProfileSerbiceVersion_args deepCopy() {
      return new getUserProfileSerbiceVersion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserProfileSerbiceVersion_args)
        return this.equals((getUserProfileSerbiceVersion_args)that);
      return false;
    }

    public boolean equals(getUserProfileSerbiceVersion_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserProfileSerbiceVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserProfileSerbiceVersion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserProfileSerbiceVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getUserProfileSerbiceVersion_argsStandardScheme getScheme() {
        return new getUserProfileSerbiceVersion_argsStandardScheme();
      }
    }

    private static class getUserProfileSerbiceVersion_argsStandardScheme extends StandardScheme<getUserProfileSerbiceVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfileSerbiceVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfileSerbiceVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserProfileSerbiceVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getUserProfileSerbiceVersion_argsTupleScheme getScheme() {
        return new getUserProfileSerbiceVersion_argsTupleScheme();
      }
    }

    private static class getUserProfileSerbiceVersion_argsTupleScheme extends TupleScheme<getUserProfileSerbiceVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfileSerbiceVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfileSerbiceVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getUserProfileSerbiceVersion_result implements org.apache.thrift.TBase<getUserProfileSerbiceVersion_result, getUserProfileSerbiceVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserProfileSerbiceVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserProfileSerbiceVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserProfileSerbiceVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserProfileSerbiceVersion_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfileSerbiceVersion_result.class, metaDataMap);
    }

    public getUserProfileSerbiceVersion_result() {
    }

    public getUserProfileSerbiceVersion_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserProfileSerbiceVersion_result(getUserProfileSerbiceVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getUserProfileSerbiceVersion_result deepCopy() {
      return new getUserProfileSerbiceVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getUserProfileSerbiceVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserProfileSerbiceVersion_result)
        return this.equals((getUserProfileSerbiceVersion_result)that);
      return false;
    }

    public boolean equals(getUserProfileSerbiceVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserProfileSerbiceVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserProfileSerbiceVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserProfileSerbiceVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getUserProfileSerbiceVersion_resultStandardScheme getScheme() {
        return new getUserProfileSerbiceVersion_resultStandardScheme();
      }
    }

    private static class getUserProfileSerbiceVersion_resultStandardScheme extends StandardScheme<getUserProfileSerbiceVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfileSerbiceVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfileSerbiceVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserProfileSerbiceVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getUserProfileSerbiceVersion_resultTupleScheme getScheme() {
        return new getUserProfileSerbiceVersion_resultTupleScheme();
      }
    }

    private static class getUserProfileSerbiceVersion_resultTupleScheme extends TupleScheme<getUserProfileSerbiceVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfileSerbiceVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfileSerbiceVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class registerUserProfile_args implements org.apache.thrift.TBase<registerUserProfile_args, registerUserProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerUserProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerUserProfile_args");

    private static final org.apache.thrift.protocol.TField USER_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("userProfile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerUserProfile_argsTupleSchemeFactory());
    }

    public org.apache.airavata.model.user.UserProfile userProfile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_PROFILE((short)1, "userProfile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_PROFILE
            return USER_PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("userProfile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.user.UserProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerUserProfile_args.class, metaDataMap);
    }

    public registerUserProfile_args() {
    }

    public registerUserProfile_args(
      org.apache.airavata.model.user.UserProfile userProfile)
    {
      this();
      this.userProfile = userProfile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerUserProfile_args(registerUserProfile_args other) {
      if (other.isSetUserProfile()) {
        this.userProfile = new org.apache.airavata.model.user.UserProfile(other.userProfile);
      }
    }

    public registerUserProfile_args deepCopy() {
      return new registerUserProfile_args(this);
    }

    @Override
    public void clear() {
      this.userProfile = null;
    }

    public org.apache.airavata.model.user.UserProfile getUserProfile() {
      return this.userProfile;
    }

    public registerUserProfile_args setUserProfile(org.apache.airavata.model.user.UserProfile userProfile) {
      this.userProfile = userProfile;
      return this;
    }

    public void unsetUserProfile() {
      this.userProfile = null;
    }

    /** Returns true if field userProfile is set (has been assigned a value) and false otherwise */
    public boolean isSetUserProfile() {
      return this.userProfile != null;
    }

    public void setUserProfileIsSet(boolean value) {
      if (!value) {
        this.userProfile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_PROFILE:
        if (value == null) {
          unsetUserProfile();
        } else {
          setUserProfile((org.apache.airavata.model.user.UserProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_PROFILE:
        return getUserProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_PROFILE:
        return isSetUserProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerUserProfile_args)
        return this.equals((registerUserProfile_args)that);
      return false;
    }

    public boolean equals(registerUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_userProfile = true && this.isSetUserProfile();
      boolean that_present_userProfile = true && that.isSetUserProfile();
      if (this_present_userProfile || that_present_userProfile) {
        if (!(this_present_userProfile && that_present_userProfile))
          return false;
        if (!this.userProfile.equals(that.userProfile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userProfile = true && (isSetUserProfile());
      list.add(present_userProfile);
      if (present_userProfile)
        list.add(userProfile);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserProfile()).compareTo(other.isSetUserProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProfile, other.userProfile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerUserProfile_args(");
      boolean first = true;

      sb.append("userProfile:");
      if (this.userProfile == null) {
        sb.append("null");
      } else {
        sb.append(this.userProfile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userProfile == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userProfile' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (userProfile != null) {
        userProfile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public registerUserProfile_argsStandardScheme getScheme() {
        return new registerUserProfile_argsStandardScheme();
      }
    }

    private static class registerUserProfile_argsStandardScheme extends StandardScheme<registerUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userProfile = new org.apache.airavata.model.user.UserProfile();
                struct.userProfile.read(iprot);
                struct.setUserProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userProfile != null) {
          oprot.writeFieldBegin(USER_PROFILE_FIELD_DESC);
          struct.userProfile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public registerUserProfile_argsTupleScheme getScheme() {
        return new registerUserProfile_argsTupleScheme();
      }
    }

    private static class registerUserProfile_argsTupleScheme extends TupleScheme<registerUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.userProfile.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userProfile = new org.apache.airavata.model.user.UserProfile();
        struct.userProfile.read(iprot);
        struct.setUserProfileIsSet(true);
      }
    }

  }

  public static class registerUserProfile_result implements org.apache.thrift.TBase<registerUserProfile_result, registerUserProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerUserProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField UPS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("upsException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerUserProfile_resultTupleSchemeFactory());
    }

    public String success; // required
    public UserProfileServiceException upsException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UPS_EXCEPTION((short)1, "upsException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UPS_EXCEPTION
            return UPS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UPS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("upsException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerUserProfile_result.class, metaDataMap);
    }

    public registerUserProfile_result() {
    }

    public registerUserProfile_result(
      String success,
      UserProfileServiceException upsException)
    {
      this();
      this.success = success;
      this.upsException = upsException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerUserProfile_result(registerUserProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUpsException()) {
        this.upsException = new UserProfileServiceException(other.upsException);
      }
    }

    public registerUserProfile_result deepCopy() {
      return new registerUserProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.upsException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public registerUserProfile_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UserProfileServiceException getUpsException() {
      return this.upsException;
    }

    public registerUserProfile_result setUpsException(UserProfileServiceException upsException) {
      this.upsException = upsException;
      return this;
    }

    public void unsetUpsException() {
      this.upsException = null;
    }

    /** Returns true if field upsException is set (has been assigned a value) and false otherwise */
    public boolean isSetUpsException() {
      return this.upsException != null;
    }

    public void setUpsExceptionIsSet(boolean value) {
      if (!value) {
        this.upsException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case UPS_EXCEPTION:
        if (value == null) {
          unsetUpsException();
        } else {
          setUpsException((UserProfileServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UPS_EXCEPTION:
        return getUpsException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UPS_EXCEPTION:
        return isSetUpsException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerUserProfile_result)
        return this.equals((registerUserProfile_result)that);
      return false;
    }

    public boolean equals(registerUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_upsException = true && this.isSetUpsException();
      boolean that_present_upsException = true && that.isSetUpsException();
      if (this_present_upsException || that_present_upsException) {
        if (!(this_present_upsException && that_present_upsException))
          return false;
        if (!this.upsException.equals(that.upsException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_upsException = true && (isSetUpsException());
      list.add(present_upsException);
      if (present_upsException)
        list.add(upsException);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpsException()).compareTo(other.isSetUpsException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpsException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upsException, other.upsException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("upsException:");
      if (this.upsException == null) {
        sb.append("null");
      } else {
        sb.append(this.upsException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public registerUserProfile_resultStandardScheme getScheme() {
        return new registerUserProfile_resultStandardScheme();
      }
    }

    private static class registerUserProfile_resultStandardScheme extends StandardScheme<registerUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UPS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.upsException = new UserProfileServiceException();
                struct.upsException.read(iprot);
                struct.setUpsExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.upsException != null) {
          oprot.writeFieldBegin(UPS_EXCEPTION_FIELD_DESC);
          struct.upsException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public registerUserProfile_resultTupleScheme getScheme() {
        return new registerUserProfile_resultTupleScheme();
      }
    }

    private static class registerUserProfile_resultTupleScheme extends TupleScheme<registerUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUpsException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUpsException()) {
          struct.upsException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.upsException = new UserProfileServiceException();
          struct.upsException.read(iprot);
          struct.setUpsExceptionIsSet(true);
        }
      }
    }

  }

  public static class getUserProfile_args implements org.apache.thrift.TBase<getUserProfile_args, getUserProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserProfile_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_INTERNAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataInternalUserId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserProfile_argsTupleSchemeFactory());
    }

    public String airavataInternalUserId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_INTERNAL_USER_ID((short)1, "airavataInternalUserId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_INTERNAL_USER_ID
            return AIRAVATA_INTERNAL_USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_INTERNAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataInternalUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfile_args.class, metaDataMap);
    }

    public getUserProfile_args() {
    }

    public getUserProfile_args(
      String airavataInternalUserId)
    {
      this();
      this.airavataInternalUserId = airavataInternalUserId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserProfile_args(getUserProfile_args other) {
      if (other.isSetAiravataInternalUserId()) {
        this.airavataInternalUserId = other.airavataInternalUserId;
      }
    }

    public getUserProfile_args deepCopy() {
      return new getUserProfile_args(this);
    }

    @Override
    public void clear() {
      this.airavataInternalUserId = null;
    }

    public String getAiravataInternalUserId() {
      return this.airavataInternalUserId;
    }

    public getUserProfile_args setAiravataInternalUserId(String airavataInternalUserId) {
      this.airavataInternalUserId = airavataInternalUserId;
      return this;
    }

    public void unsetAiravataInternalUserId() {
      this.airavataInternalUserId = null;
    }

    /** Returns true if field airavataInternalUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataInternalUserId() {
      return this.airavataInternalUserId != null;
    }

    public void setAiravataInternalUserIdIsSet(boolean value) {
      if (!value) {
        this.airavataInternalUserId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_INTERNAL_USER_ID:
        if (value == null) {
          unsetAiravataInternalUserId();
        } else {
          setAiravataInternalUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_INTERNAL_USER_ID:
        return getAiravataInternalUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_INTERNAL_USER_ID:
        return isSetAiravataInternalUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserProfile_args)
        return this.equals((getUserProfile_args)that);
      return false;
    }

    public boolean equals(getUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataInternalUserId = true && this.isSetAiravataInternalUserId();
      boolean that_present_airavataInternalUserId = true && that.isSetAiravataInternalUserId();
      if (this_present_airavataInternalUserId || that_present_airavataInternalUserId) {
        if (!(this_present_airavataInternalUserId && that_present_airavataInternalUserId))
          return false;
        if (!this.airavataInternalUserId.equals(that.airavataInternalUserId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_airavataInternalUserId = true && (isSetAiravataInternalUserId());
      list.add(present_airavataInternalUserId);
      if (present_airavataInternalUserId)
        list.add(airavataInternalUserId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataInternalUserId()).compareTo(other.isSetAiravataInternalUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataInternalUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataInternalUserId, other.airavataInternalUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserProfile_args(");
      boolean first = true;

      sb.append("airavataInternalUserId:");
      if (this.airavataInternalUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataInternalUserId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (airavataInternalUserId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataInternalUserId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public getUserProfile_argsStandardScheme getScheme() {
        return new getUserProfile_argsStandardScheme();
      }
    }

    private static class getUserProfile_argsStandardScheme extends StandardScheme<getUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_INTERNAL_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataInternalUserId = iprot.readString();
                struct.setAiravataInternalUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataInternalUserId != null) {
          oprot.writeFieldBegin(AIRAVATA_INTERNAL_USER_ID_FIELD_DESC);
          oprot.writeString(struct.airavataInternalUserId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public getUserProfile_argsTupleScheme getScheme() {
        return new getUserProfile_argsTupleScheme();
      }
    }

    private static class getUserProfile_argsTupleScheme extends TupleScheme<getUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.airavataInternalUserId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.airavataInternalUserId = iprot.readString();
        struct.setAiravataInternalUserIdIsSet(true);
      }
    }

  }

  public static class getUserProfile_result implements org.apache.thrift.TBase<getUserProfile_result, getUserProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UPS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("upsException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserProfile_resultTupleSchemeFactory());
    }

    public org.apache.airavata.model.user.UserProfile success; // required
    public UserProfileServiceException upsException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UPS_EXCEPTION((short)1, "upsException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UPS_EXCEPTION
            return UPS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.user.UserProfile.class)));
      tmpMap.put(_Fields.UPS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("upsException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfile_result.class, metaDataMap);
    }

    public getUserProfile_result() {
    }

    public getUserProfile_result(
      org.apache.airavata.model.user.UserProfile success,
      UserProfileServiceException upsException)
    {
      this();
      this.success = success;
      this.upsException = upsException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserProfile_result(getUserProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.model.user.UserProfile(other.success);
      }
      if (other.isSetUpsException()) {
        this.upsException = new UserProfileServiceException(other.upsException);
      }
    }

    public getUserProfile_result deepCopy() {
      return new getUserProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.upsException = null;
    }

    public org.apache.airavata.model.user.UserProfile getSuccess() {
      return this.success;
    }

    public getUserProfile_result setSuccess(org.apache.airavata.model.user.UserProfile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UserProfileServiceException getUpsException() {
      return this.upsException;
    }

    public getUserProfile_result setUpsException(UserProfileServiceException upsException) {
      this.upsException = upsException;
      return this;
    }

    public void unsetUpsException() {
      this.upsException = null;
    }

    /** Returns true if field upsException is set (has been assigned a value) and false otherwise */
    public boolean isSetUpsException() {
      return this.upsException != null;
    }

    public void setUpsExceptionIsSet(boolean value) {
      if (!value) {
        this.upsException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.model.user.UserProfile)value);
        }
        break;

      case UPS_EXCEPTION:
        if (value == null) {
          unsetUpsException();
        } else {
          setUpsException((UserProfileServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UPS_EXCEPTION:
        return getUpsException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UPS_EXCEPTION:
        return isSetUpsException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserProfile_result)
        return this.equals((getUserProfile_result)that);
      return false;
    }

    public boolean equals(getUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_upsException = true && this.isSetUpsException();
      boolean that_present_upsException = true && that.isSetUpsException();
      if (this_present_upsException || that_present_upsException) {
        if (!(this_present_upsException && that_present_upsException))
          return false;
        if (!this.upsException.equals(that.upsException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_upsException = true && (isSetUpsException());
      list.add(present_upsException);
      if (present_upsException)
        list.add(upsException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpsException()).compareTo(other.isSetUpsException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpsException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upsException, other.upsException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("upsException:");
      if (this.upsException == null) {
        sb.append("null");
      } else {
        sb.append(this.upsException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public getUserProfile_resultStandardScheme getScheme() {
        return new getUserProfile_resultStandardScheme();
      }
    }

    private static class getUserProfile_resultStandardScheme extends StandardScheme<getUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.model.user.UserProfile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UPS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.upsException = new UserProfileServiceException();
                struct.upsException.read(iprot);
                struct.setUpsExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.upsException != null) {
          oprot.writeFieldBegin(UPS_EXCEPTION_FIELD_DESC);
          struct.upsException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public getUserProfile_resultTupleScheme getScheme() {
        return new getUserProfile_resultTupleScheme();
      }
    }

    private static class getUserProfile_resultTupleScheme extends TupleScheme<getUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUpsException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUpsException()) {
          struct.upsException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.model.user.UserProfile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.upsException = new UserProfileServiceException();
          struct.upsException.read(iprot);
          struct.setUpsExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteUserProfile_args implements org.apache.thrift.TBase<deleteUserProfile_args, deleteUserProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUserProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserProfile_args");

    private static final org.apache.thrift.protocol.TField AIRAVATA_INTERNAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataInternalUserId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserProfile_argsTupleSchemeFactory());
    }

    public String airavataInternalUserId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AIRAVATA_INTERNAL_USER_ID((short)1, "airavataInternalUserId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AIRAVATA_INTERNAL_USER_ID
            return AIRAVATA_INTERNAL_USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AIRAVATA_INTERNAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataInternalUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserProfile_args.class, metaDataMap);
    }

    public deleteUserProfile_args() {
    }

    public deleteUserProfile_args(
      String airavataInternalUserId)
    {
      this();
      this.airavataInternalUserId = airavataInternalUserId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserProfile_args(deleteUserProfile_args other) {
      if (other.isSetAiravataInternalUserId()) {
        this.airavataInternalUserId = other.airavataInternalUserId;
      }
    }

    public deleteUserProfile_args deepCopy() {
      return new deleteUserProfile_args(this);
    }

    @Override
    public void clear() {
      this.airavataInternalUserId = null;
    }

    public String getAiravataInternalUserId() {
      return this.airavataInternalUserId;
    }

    public deleteUserProfile_args setAiravataInternalUserId(String airavataInternalUserId) {
      this.airavataInternalUserId = airavataInternalUserId;
      return this;
    }

    public void unsetAiravataInternalUserId() {
      this.airavataInternalUserId = null;
    }

    /** Returns true if field airavataInternalUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetAiravataInternalUserId() {
      return this.airavataInternalUserId != null;
    }

    public void setAiravataInternalUserIdIsSet(boolean value) {
      if (!value) {
        this.airavataInternalUserId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AIRAVATA_INTERNAL_USER_ID:
        if (value == null) {
          unsetAiravataInternalUserId();
        } else {
          setAiravataInternalUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AIRAVATA_INTERNAL_USER_ID:
        return getAiravataInternalUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AIRAVATA_INTERNAL_USER_ID:
        return isSetAiravataInternalUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserProfile_args)
        return this.equals((deleteUserProfile_args)that);
      return false;
    }

    public boolean equals(deleteUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_airavataInternalUserId = true && this.isSetAiravataInternalUserId();
      boolean that_present_airavataInternalUserId = true && that.isSetAiravataInternalUserId();
      if (this_present_airavataInternalUserId || that_present_airavataInternalUserId) {
        if (!(this_present_airavataInternalUserId && that_present_airavataInternalUserId))
          return false;
        if (!this.airavataInternalUserId.equals(that.airavataInternalUserId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_airavataInternalUserId = true && (isSetAiravataInternalUserId());
      list.add(present_airavataInternalUserId);
      if (present_airavataInternalUserId)
        list.add(airavataInternalUserId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAiravataInternalUserId()).compareTo(other.isSetAiravataInternalUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAiravataInternalUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataInternalUserId, other.airavataInternalUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserProfile_args(");
      boolean first = true;

      sb.append("airavataInternalUserId:");
      if (this.airavataInternalUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.airavataInternalUserId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (airavataInternalUserId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataInternalUserId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public deleteUserProfile_argsStandardScheme getScheme() {
        return new deleteUserProfile_argsStandardScheme();
      }
    }

    private static class deleteUserProfile_argsStandardScheme extends StandardScheme<deleteUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AIRAVATA_INTERNAL_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.airavataInternalUserId = iprot.readString();
                struct.setAiravataInternalUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.airavataInternalUserId != null) {
          oprot.writeFieldBegin(AIRAVATA_INTERNAL_USER_ID_FIELD_DESC);
          oprot.writeString(struct.airavataInternalUserId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public deleteUserProfile_argsTupleScheme getScheme() {
        return new deleteUserProfile_argsTupleScheme();
      }
    }

    private static class deleteUserProfile_argsTupleScheme extends TupleScheme<deleteUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.airavataInternalUserId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.airavataInternalUserId = iprot.readString();
        struct.setAiravataInternalUserIdIsSet(true);
      }
    }

  }

  public static class deleteUserProfile_result implements org.apache.thrift.TBase<deleteUserProfile_result, deleteUserProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUserProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UPS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("upsException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserProfile_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public UserProfileServiceException upsException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UPS_EXCEPTION((short)1, "upsException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UPS_EXCEPTION
            return UPS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UPS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("upsException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserProfile_result.class, metaDataMap);
    }

    public deleteUserProfile_result() {
    }

    public deleteUserProfile_result(
      boolean success,
      UserProfileServiceException upsException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.upsException = upsException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserProfile_result(deleteUserProfile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUpsException()) {
        this.upsException = new UserProfileServiceException(other.upsException);
      }
    }

    public deleteUserProfile_result deepCopy() {
      return new deleteUserProfile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.upsException = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteUserProfile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public UserProfileServiceException getUpsException() {
      return this.upsException;
    }

    public deleteUserProfile_result setUpsException(UserProfileServiceException upsException) {
      this.upsException = upsException;
      return this;
    }

    public void unsetUpsException() {
      this.upsException = null;
    }

    /** Returns true if field upsException is set (has been assigned a value) and false otherwise */
    public boolean isSetUpsException() {
      return this.upsException != null;
    }

    public void setUpsExceptionIsSet(boolean value) {
      if (!value) {
        this.upsException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case UPS_EXCEPTION:
        if (value == null) {
          unsetUpsException();
        } else {
          setUpsException((UserProfileServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case UPS_EXCEPTION:
        return getUpsException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UPS_EXCEPTION:
        return isSetUpsException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserProfile_result)
        return this.equals((deleteUserProfile_result)that);
      return false;
    }

    public boolean equals(deleteUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_upsException = true && this.isSetUpsException();
      boolean that_present_upsException = true && that.isSetUpsException();
      if (this_present_upsException || that_present_upsException) {
        if (!(this_present_upsException && that_present_upsException))
          return false;
        if (!this.upsException.equals(that.upsException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_upsException = true && (isSetUpsException());
      list.add(present_upsException);
      if (present_upsException)
        list.add(upsException);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpsException()).compareTo(other.isSetUpsException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpsException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upsException, other.upsException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("upsException:");
      if (this.upsException == null) {
        sb.append("null");
      } else {
        sb.append(this.upsException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public deleteUserProfile_resultStandardScheme getScheme() {
        return new deleteUserProfile_resultStandardScheme();
      }
    }

    private static class deleteUserProfile_resultStandardScheme extends StandardScheme<deleteUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UPS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.upsException = new UserProfileServiceException();
                struct.upsException.read(iprot);
                struct.setUpsExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.upsException != null) {
          oprot.writeFieldBegin(UPS_EXCEPTION_FIELD_DESC);
          struct.upsException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public deleteUserProfile_resultTupleScheme getScheme() {
        return new deleteUserProfile_resultTupleScheme();
      }
    }

    private static class deleteUserProfile_resultTupleScheme extends TupleScheme<deleteUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUpsException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUpsException()) {
          struct.upsException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.upsException = new UserProfileServiceException();
          struct.upsException.read(iprot);
          struct.setUpsExceptionIsSet(true);
        }
      }
    }

  }

}
